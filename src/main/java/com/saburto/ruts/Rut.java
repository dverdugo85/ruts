package com.saburto.ruts;

import static com.saburto.ruts.CheckDigitGenerator.fromNumber;
import static com.saburto.ruts.ValueExtractor.extract;
import static com.saburto.ruts.ValueExtractor.LOCALE_ESCL;
import static java.util.Objects.hash;
import static java.util.Objects.requireNonNull;

import java.io.Serializable;

public class Rut implements Comparable<Rut>, Serializable {

  private static final long serialVersionUID = -4653487574897221420L;

  private final int number;
  private final String checkDigit;

  public Rut(int number, String checkDigit) {
    this.number = number;
    this.checkDigit = checkDigit;
  }

  public int getNumber() {
    return number;
  }

  public String getCheckDigit() {
    return checkDigit;
  }

  /**
   * This method compare the check digit and the mod 11 generated by the number, <b>Ignore case for "K"</b>
   */
  public boolean isValid() {
    return fromNumber(number).equalsIgnoreCase(checkDigit);
  }

  @Override
  public int hashCode() {
    return hash(number, checkDigit);
  }

  /**
   * Compares number part and check digit ignore case
   */
  @Override
  public boolean equals(Object other) {
    if (other instanceof Rut) {
      Rut otherRut = (Rut) other;
      return number == otherRut.number &&
        checkDigit.equalsIgnoreCase(otherRut.checkDigit);
    }
    return false;
  }

  /**
   * Compare RUT in ascendent order by number part then the check digit
   * <p>
   * Example:
   * <ul>
   * <li>124-1</li>
   * <li>125-1</li>
   * <li>125-8</li>
   * </ul>
   */
  @Override
  public int compareTo(Rut o) {
    int numberCompare = Integer.compare(number, o.number);
    if (numberCompare == 0) {
      return checkDigit.compareTo(o.checkDigit);
    }
    return numberCompare;
  }

  /**
   * Returns in format 12.111.222-1
   */
  @Override
  public String toString() {
    return String.format(LOCALE_ESCL, "%,d-%s", number, checkDigit);
  }

  /**
   * Creates Rut object from string value
   * <p>
   * The check digit is <b>not</b> validate on this method
   *
   * @param rawRut String with format 12.122.122-1 or 12122122-1
   * @exception NullPointerException if rawRut is null
   * @exception IllegalArgumentException if rawRut has invalid format
   * @return returns an Rut object
   */
  public static Rut parse(String rawRut) {
    requireNonNull(rawRut, "raw rut must not be null");
    return extract(rawRut, Rut::new);
  }
}
